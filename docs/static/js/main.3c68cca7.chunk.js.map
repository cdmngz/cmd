{"version":3,"sources":["assets sync /^/.*/.svg$","assets/firebase.svg","assets/git.svg","assets/github.svg","assets/react.svg","assets/vue.svg","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","App","array","lang","title","cmd","useState","data","setData","className","autoFocus","onChange","event","valor","target","value","filter","element","toLowerCase","includes","name","placeholder","type","i","key","src","require","sub","subindex","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kKAAA,IAAIA,EAAM,CACT,iBAAkB,GAClB,YAAa,GACb,eAAgB,GAChB,cAAe,GACf,YAAa,IAId,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,gBC1BpBU,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,4FCmF5BC,MAhFf,WAEE,IAAMC,EAAQ,CACZ,CACEC,KAAM,MACNC,MAAO,6BACPC,IAAK,CAAC,WAAY,YAAa,iCAAkC,+DAAgE,8BAEnI,CACEF,KAAM,QACNC,MAAO,iBACPC,IAAK,CAAC,8BAA+B,YAAa,cAEpD,CACEF,KAAM,MACNC,MAAO,0BACPC,IAAK,CAAC,kBAER,CACEF,KAAM,WACNC,MAAO,iBACPC,IAAK,CAAC,oBAER,CACEF,KAAM,MACNC,MAAO,0BACPC,IAAK,CAAC,mBA1BG,EA8BWC,oBAAS,kBAAMJ,KA9B1B,mBA8BNK,EA9BM,KA8BAC,EA9BA,KAqCb,OACE,kBAAC,WAAD,KACE,yBAAKC,UAAU,WACb,2BACEC,WAAS,EACTC,SAVkB,SAACC,GACzB,IAAIC,EAAQD,EAAME,OAAOC,MACzBP,EAAQN,EAAMc,QAAO,SAAAC,GAAO,OAAIA,EAAQd,KAAKe,cAAcC,SAASN,EAAMK,gBAAkBD,EAAQb,MAAMc,cAAcC,SAASN,EAAMK,oBASjIE,KAAK,SACLC,YAAY,wBACZC,KAAK,YAIT,iCAEIf,EAAKrB,KAAI,SAAC+B,EAASM,GACjB,OACE,yBACEC,IAAKD,EACLd,UAAW,kBAAkBQ,EAAQd,MAErC,2BAAG,2BAAIc,EAAQb,OAAf,IAA0B,yBAAKK,UAAU,OAAOgB,IAAKC,MAAQ,YAAYT,EAAQd,KAArB,WAA5D,IAAiGc,EAAQd,MACzG,yBAAKM,UAAU,cAEbQ,EAAQZ,IAAInB,KAAI,SAACyC,EAAKC,GAAN,OACd,yBACEnB,UAAU,aACVe,IAAKI,GAEJD,cCxDHE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3c68cca7.chunk.js","sourcesContent":["var map = {\n\t\"./firebase.svg\": 12,\n\t\"./git.svg\": 13,\n\t\"./github.svg\": 14,\n\t\"./react.svg\": 15,\n\t\"./vue.svg\": 16\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 11;","module.exports = __webpack_public_path__ + \"static/media/firebase.6caacd1a.svg\";","module.exports = __webpack_public_path__ + \"static/media/git.1acf1264.svg\";","module.exports = __webpack_public_path__ + \"static/media/github.07883e93.svg\";","module.exports = __webpack_public_path__ + \"static/media/react.1a36cc4d.svg\";","module.exports = __webpack_public_path__ + \"static/media/vue.9a45fc76.svg\";","import React, { Fragment, useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  \n  const array = [\n    {\n      lang: 'git',\n      title: 'Iniciar Repositorio GitHub',\n      cmd: ['git init', 'git add .', 'git commit -m \"Initial commit\"', 'git remote add origin https://github.com/USER/REPOSITORY.git', 'git push -u origin master']\n    },\n    {\n      lang: 'react',\n      title: 'Crear proyecto',\n      cmd: ['npx create-react-app my-app', 'cd my-app', 'npm start']\n    },\n    {\n      lang: 'vue',\n      title: 'Ejecutar servidor local',\n      cmd: ['npm run serve']\n    },\n    {\n      lang: 'firebase',\n      title: 'Deploy Hosting',\n      cmd: ['firebase deploy']\n    },\n    {\n      lang: 'vue',\n      title: 'Ejecutar servidor local',\n      cmd: ['npm run serve']\n    },\n  ]\n\n  const [data, setData] = useState(() => array)\n\n  const handleInputChange = (event) => {\n    let valor = event.target.value\n    setData(array.filter(element => element.lang.toLowerCase().includes(valor.toLowerCase()) || element.title.toLowerCase().includes(valor.toLowerCase())))\n  }\n  \n  return (\n    <Fragment>\n      <nav className=\"nav-bar\">\n        <input\n          autoFocus\n          onChange={handleInputChange}\n          name=\"search\"\n          placeholder=\"QuÃ© deseas buscar?\"\n          type=\"search\"\n        />\n      </nav>\n\n      <section>\n        {\n          data.map((element, i) => {\n            return(\n              <div\n                key={i}\n                className={\"code-container \"+element.lang}\n                >\n                <p><b>{element.title}</b> <img className=\"logo\" src={require(`./assets/${element.lang}.svg`)}/> {element.lang}</p>\n                <div className=\"code-panel\">\n                { \n                  element.cmd.map((sub, subindex) =>\n                    <pre\n                      className=\"code-lines\"\n                      key={subindex}\n                      >\n                      {sub}\n                    </pre>\n                  )\n                }\n                </div>\n              </div>\n            )\n          })\n        }\n      </section>\n\n    </Fragment>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}